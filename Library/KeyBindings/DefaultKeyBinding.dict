{
  "^m" = {  // Control & modifier glyphs: two-stroke bindings starting with ⌃M
    // space/caret-position characters
    "^ "    = ("insertText:", "\U2423");  // ⌃␣:    space
    // return/enter/linefeed characters
    "^e"    = ("insertText:", "\U21A9");  // ⌃E     return
    "e"     = ("insertText:", "\U2305");  // E      enter
    // tab/backtab arrows
    "^t"    = ("insertText:", "\U21E5");  // ⌃T     tab
    "t"     = ("insertText:", "\U21E4");  // T      backtab
    // backward/forward delete arrows
    "^d"    = ("insertText:", "\U232B");  // ⌃D     delete
    "d"     = ("insertText:", "\U2326");  // D      forward delete
    // modifier keys
    "^a"    = ("insertText:", "\U2318");  // ⌃A     command (apple)
    "^o"    = ("insertText:", "\U2325");  // ⌃O     option
    "^c"    = ("insertText:", "\U2303");  // ⌃C     control
    "^s"    = ("insertText:", "\U21E7");  // ⌃S     shift
    "s"     = ("insertText:", "\U21EA");  // S      caps lock
    // arrows
    "^b"    = ("insertText:", "\U2190");  // ⌃B     solid left
    "^f"    = ("insertText:", "\U2192");  // ⌃F     solid right
    "^p"    = ("insertText:", "\U2191");  // ⌃P     solid up
    "^n"    = ("insertText:", "\U2193");  // ⌃N     solid down
    "b"     = ("insertText:", "\U21E0");  // F      dotted left
    "f"     = ("insertText:", "\U21E2");  // B      dotted right
    "p"     = ("insertText:", "\U21E1");  // P      dotted up
    "n"     = ("insertText:", "\U21E3");  // N      dotted down
    // modifier keys
    "^h"    = ("insertText:", "\U2196");  // ⌃H     home
    "h"     = ("insertText:", "\U2198");  // H      end
    "^u"    = ("insertText:", "\U21DE");  // ⌃U     page up
    "u"     = ("insertText:", "\U21DF");  // U      page down

    "^x"    = ("insertText:", "\U238B");  // ⌃X     escape
    "x"     = ("insertText:", "\U23CF");  // X      eject
  };

  "^@s" = {   // surround commands: two-stroke bindings starting with ⌘⌃S
    // wrap () with spaces
    "(" = (delete:, insertText:, "( ", yank:, insertText:, " ", moveLeft:, insertText:, " )", deleteForward:);
    // wrap () no spaces
    ")" = (delete:, insertText:, "( ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, ")", deleteForward:);
    // wrap [] with spaces
    "[" = (delete:, insertText:, "[ ", yank:, insertText:, " ", moveLeft:, insertText:, " ]", deleteForward:);
    // wrap [] no spaces
    "]" = (delete:, insertText:, "[ ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, "]", deleteForward:);
    // wrap {} with spaces
    "{" = (delete:, insertText:, "{ ", yank:, insertText:, " ", moveLeft:, insertText:, " }", deleteForward:);
    // wrap {} no spaces
    "}" = (delete:, insertText:, "{ ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, "}", deleteForward:);
    // wrap <> with spaces
    "<" = (delete:, insertText:, "< ", yank:, insertText:, " ", moveLeft:, insertText:, " >", deleteForward:);
    // wrap <> no spaces
    ">" = (delete:, insertText:, "< ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, ">", deleteForward:);
    // wrap single quotes
    "'" = (delete:, insertText:, "' ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, "'", deleteForward:);
    // wrap backticks
    "`" = (delete:, insertText:, "` ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, "`", deleteForward:);
    // wrap double quote
    "\"" = (delete:, insertText:, "\" ", deleteBackward:, yank:, insertText:, " ", moveLeft:, insertText:, "\"", deleteForward:);
  };
}
